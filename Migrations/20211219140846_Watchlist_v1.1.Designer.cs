// <auto-generated />
using System;
using IGApi.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IGApi.Migrations
{
    [DbContext(typeof(IGApiDbContext))]
    [Migration("20211219140846_Watchlist_v1.1")]
    partial class Watchlist_v11
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("IGApi.Model.Account", b =>
                {
                    b.Property<string>("AccountId")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("account_id");

                    b.Property<string>("AccountAlias")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("account_alias");

                    b.Property<string>("AccountName")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("account_name");

                    b.Property<string>("AccountType")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("account_type");

                    b.Property<decimal?>("AmountDue")
                        .HasPrecision(38, 19)
                        .HasColumnType("decimal(38,19)")
                        .HasColumnName("amount_due");

                    b.Property<DateTime>("ApiLastUpdate")
                        .HasColumnType("datetime2")
                        .HasColumnName("api_last_update");

                    b.Property<decimal?>("AvailableCash")
                        .HasPrecision(38, 19)
                        .HasColumnType("decimal(38,19)")
                        .HasColumnName("available_cash");

                    b.Property<decimal?>("Balance")
                        .HasPrecision(38, 19)
                        .HasColumnType("decimal(38,19)")
                        .HasColumnName("balance");

                    b.Property<bool?>("CanTransferFrom")
                        .HasColumnType("bit")
                        .HasColumnName("can_transfer_from");

                    b.Property<bool?>("CanTransferTo")
                        .HasColumnType("bit")
                        .HasColumnName("can_transfer_to");

                    b.Property<string>("Currency")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("currency");

                    b.Property<decimal?>("Deposit")
                        .HasPrecision(38, 19)
                        .HasColumnType("decimal(38,19)")
                        .HasColumnName("deposit");

                    b.Property<decimal?>("Equity")
                        .HasPrecision(38, 19)
                        .HasColumnType("decimal(38,19)")
                        .HasColumnName("equity");

                    b.Property<decimal?>("EquityUsed")
                        .HasPrecision(38, 19)
                        .HasColumnType("decimal(38,19)")
                        .HasColumnName("equity_used");

                    b.Property<bool?>("Preferred")
                        .HasColumnType("bit")
                        .HasColumnName("preferred");

                    b.Property<decimal?>("ProfitAndLoss")
                        .HasPrecision(38, 19)
                        .HasColumnType("decimal(38,19)")
                        .HasColumnName("profit_and_loss");

                    b.Property<string>("Status")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("status");

                    b.Property<decimal?>("UsedMargin")
                        .HasPrecision(38, 19)
                        .HasColumnType("decimal(38,19)")
                        .HasColumnName("used_margin");

                    b.HasKey("AccountId");

                    b.ToTable("account");
                });

            modelBuilder.Entity("IGApi.Model.ActivityHistory", b =>
                {
                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("timestamp");

                    b.Property<string>("DealId")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("deal_id");

                    b.Property<string>("ActionStatus")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("action_status");

                    b.Property<string>("Activity")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("activity");

                    b.Property<string>("ActivityHistoryId")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("activity_history_id");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("channel");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("currency");

                    b.Property<string>("Epic")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("epic");

                    b.Property<decimal?>("Level")
                        .HasPrecision(38, 19)
                        .HasColumnType("decimal(38,19)")
                        .HasColumnName("level");

                    b.Property<decimal?>("Limit")
                        .HasPrecision(38, 19)
                        .HasColumnType("decimal(38,19)")
                        .HasColumnName("limit");

                    b.Property<string>("MarketName")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("market_name");

                    b.Property<string>("Period")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("period");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("reference");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("result");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("size");

                    b.Property<decimal?>("Stop")
                        .HasPrecision(38, 19)
                        .HasColumnType("decimal(38,19)")
                        .HasColumnName("stop");

                    b.Property<string>("StopType")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("stop_type");

                    b.HasKey("Timestamp", "DealId");

                    b.ToTable("activity_history");
                });

            modelBuilder.Entity("IGApi.Model.ApiEngineStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("IsAlive")
                        .HasColumnType("datetime2")
                        .HasColumnName("is_alive");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.ToTable("api_engine_status");

                    SqlServerEntityTypeBuilderExtensions.IsMemoryOptimized(b);
                });

            modelBuilder.Entity("IGApi.Model.ApiRequestQueueItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("ExecuteAsap")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("execute_asap");

                    b.Property<bool>("IsRecurrent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_recurrent");

                    b.Property<string>("Parameters")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("parameter");

                    b.Property<string>("Request")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("request");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("timestamp")
                        .HasDefaultValueSql("getutcdate()");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("ExecuteAsap", "Timestamp");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("ExecuteAsap", "Timestamp"), false);

                    b.ToTable("api_request_queue_item");

                    SqlServerEntityTypeBuilderExtensions.IsMemoryOptimized(b);

                    b.HasCheckConstraint("request", "request in ('GetAccountDetails','GetOpenPositions','GetWorkingOrders','GetActivityHistory','GetTransactionHistory','GetClientSentiment','CreatePosition','EditPosition','ClosePosition','CreateWorkingOrder','EditWorkingOrder','DeleteWorkingOrder','GetWatchlists','GetEpicDetails')");
                });

            modelBuilder.Entity("IGApi.Model.ClientSentiment", b =>
                {
                    b.Property<string>("MarketId")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("market_id");

                    b.Property<DateTime>("ApiLastUpdate")
                        .HasColumnType("datetime2")
                        .HasColumnName("api_last_update");

                    b.Property<decimal?>("LongPositionPercentage")
                        .HasPrecision(38, 19)
                        .HasColumnType("decimal(38,19)")
                        .HasColumnName("long_position_percentage");

                    b.Property<decimal?>("ShortPositionPercentage")
                        .HasPrecision(38, 19)
                        .HasColumnType("decimal(38,19)")
                        .HasColumnName("short_position_percentage");

                    b.HasKey("MarketId");

                    b.ToTable("client_sentiment");
                });

            modelBuilder.Entity("IGApi.Model.ConfirmResponse", b =>
                {
                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("timestamp");

                    b.Property<string>("DealReference")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("deal_reference");

                    b.Property<string>("AffectedDeals")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("affected_deals");

                    b.Property<string>("DealId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("deal_id");

                    b.Property<string>("DealStatus")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("deal_status");

                    b.Property<string>("Direction")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("direction");

                    b.Property<string>("Epic")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("epic");

                    b.Property<string>("Expiry")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("expiry");

                    b.Property<bool>("GuaranteedStop")
                        .HasColumnType("bit")
                        .HasColumnName("guaranteed_stop");

                    b.Property<decimal?>("Level")
                        .HasPrecision(38, 19)
                        .HasColumnType("decimal(38,19)")
                        .HasColumnName("level");

                    b.Property<decimal?>("LimitDistance")
                        .HasPrecision(38, 19)
                        .HasColumnType("decimal(38,19)")
                        .HasColumnName("limit_distance");

                    b.Property<decimal?>("LimitLevel")
                        .HasPrecision(38, 19)
                        .HasColumnType("decimal(38,19)")
                        .HasColumnName("limit_level");

                    b.Property<string>("Reason")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("reason");

                    b.Property<decimal?>("Size")
                        .HasPrecision(38, 19)
                        .HasColumnType("decimal(38,19)")
                        .HasColumnName("size");

                    b.Property<string>("Status")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("status");

                    b.Property<decimal?>("StopDistance")
                        .HasPrecision(38, 19)
                        .HasColumnType("decimal(38,19)")
                        .HasColumnName("stop_distance");

                    b.Property<decimal?>("StopLevel")
                        .HasPrecision(38, 19)
                        .HasColumnType("decimal(38,19)")
                        .HasColumnName("stop_level");

                    b.HasKey("Timestamp", "DealReference");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Timestamp", "DealReference"), false);

                    b.ToTable("confirm_response");

                    SqlServerEntityTypeBuilderExtensions.IsMemoryOptimized(b);
                });

            modelBuilder.Entity("IGApi.Model.Currency", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("code");

                    b.Property<DateTime>("ApiLastUpdate")
                        .HasColumnType("datetime2")
                        .HasColumnName("api_last_update");

                    b.Property<decimal?>("BaseExchangeRate")
                        .HasPrecision(38, 19)
                        .HasColumnType("decimal(38,19)")
                        .HasColumnName("base_exchange_rate");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit")
                        .HasColumnName("is_default");

                    b.Property<string>("Symbol")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("symbol");

                    b.HasKey("Code");

                    b.ToTable("currency");
                });

            modelBuilder.Entity("IGApi.Model.EpicDetail", b =>
                {
                    b.Property<string>("Epic")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("epic");

                    b.Property<DateTime>("ApiLastUpdate")
                        .HasColumnType("datetime2")
                        .HasColumnName("api_last_update");

                    b.Property<string>("ChartCode")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("chart_code");

                    b.Property<decimal?>("ContractSize")
                        .HasPrecision(38, 19)
                        .HasColumnType("decimal(38,19)")
                        .HasColumnName("contract_size");

                    b.Property<bool>("ControlledRiskAllowed")
                        .HasColumnType("bit")
                        .HasColumnName("controlled_risk_allowed");

                    b.Property<string>("Country")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("country");

                    b.Property<string>("DealingRuleMarketOrderPreference")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("dealing_rule_market_order_preference");

                    b.Property<string>("DealingRuleTrailingStopsPreference")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("dealing_rule_trailing_stop_preference");

                    b.Property<string>("DealingRuleUnitMaxStopOrLimitDistance")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("dealing_rule_unit_max_stop_or_limit_distance");

                    b.Property<string>("DealingRuleUnitMinControlledRiskStopDistance")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("dealing_rule_unit_min_controlled_risk_stop_distance");

                    b.Property<string>("DealingRuleUnitMinDealSize")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("dealing_rule_unit_min_deal_size");

                    b.Property<string>("DealingRuleUnitMinNormalStopOrLimitDistance")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("dealing_rule_unit_min_normal_stop_or_limit_distance");

                    b.Property<string>("DealingRuleUnitMinStepDistance")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("dealing_rule_unit_min_step_distance");

                    b.Property<decimal?>("DealingRuleValueMaxStopOrLimitDistance")
                        .HasPrecision(38, 19)
                        .HasColumnType("decimal(38,19)")
                        .HasColumnName("dealing_rule_value_max_stop_or_limit_distance");

                    b.Property<decimal?>("DealingRuleValueMinControlledRiskStopDistance")
                        .HasPrecision(38, 19)
                        .HasColumnType("decimal(38,19)")
                        .HasColumnName("dealing_rule_value_min_controlled_risk_stop_distance");

                    b.Property<decimal?>("DealingRuleValueMinDealSize")
                        .HasPrecision(38, 19)
                        .HasColumnType("decimal(38,19)")
                        .HasColumnName("dealing_rule_value_min_deal_size");

                    b.Property<decimal?>("DealingRuleValueMinNormalStopOrLimitDistance")
                        .HasPrecision(38, 19)
                        .HasColumnType("decimal(38,19)")
                        .HasColumnName("dealing_rule_value_min_normal_stop_or_limit_distance");

                    b.Property<decimal?>("DealingRuleValueMinStepDistance")
                        .HasPrecision(38, 19)
                        .HasColumnType("decimal(38,19)")
                        .HasColumnName("dealing_rule_value_min_step_distance");

                    b.Property<string>("Expiry")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("expiry");

                    b.Property<DateTime?>("ExpirylastDealingDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("expiry_last_dealingdate");

                    b.Property<string>("ExpirysettlementInfo")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("expiry_settlement_info");

                    b.Property<bool>("ForceOpenAllowed")
                        .HasColumnType("bit")
                        .HasColumnName("force_open_allowed");

                    b.Property<DateTime?>("LastRolloverTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_rollover_time");

                    b.Property<decimal?>("LotSize")
                        .HasPrecision(38, 19)
                        .HasColumnType("decimal(38,19)")
                        .HasColumnName("lot_size");

                    b.Property<decimal?>("MarginFactor")
                        .HasPrecision(38, 19)
                        .HasColumnType("decimal(38,19)")
                        .HasColumnName("margin_factor");

                    b.Property<string>("MarginFactorUnit")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("margin_factor_unit");

                    b.Property<string>("MarketId")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("market_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("name");

                    b.Property<string>("NewsCode")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("news_code");

                    b.Property<string>("OnePipMeans")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("one_pip_means");

                    b.Property<string>("PositionSizeUnit")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("position_size_unit");

                    b.Property<string>("RolloverInfo")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("rollover_info");

                    b.Property<string>("SlippageFactorUnit")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("slippage_factor_unit");

                    b.Property<decimal?>("SlippageFactorValue")
                        .HasPrecision(38, 19)
                        .HasColumnType("decimal(38,19)")
                        .HasColumnName("slippage_factor_value");

                    b.Property<int>("SprintMarketsMaximumExpiryTime")
                        .HasColumnType("int")
                        .HasColumnName("sprintmarket_maximum_expiry_time");

                    b.Property<int>("SprintMarketsMinimumExpiryTime")
                        .HasColumnType("int")
                        .HasColumnName("sprintmarket_minimum_expiry_time");

                    b.Property<bool>("StopsLimitsAllowed")
                        .HasColumnType("bit")
                        .HasColumnName("stop_limit_allowed");

                    b.Property<bool>("StreamingPricesAvailable")
                        .HasColumnType("bit")
                        .HasColumnName("streaming_prices_available");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("type");

                    b.Property<string>("ValueOfOnePip")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("value_of_one_pip");

                    b.HasKey("Epic");

                    b.ToTable("epic_detail");
                });

            modelBuilder.Entity("IGApi.Model.EpicDetailCurrency", b =>
                {
                    b.Property<string>("Epic")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("epic");

                    b.Property<string>("Code")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("code");

                    b.Property<DateTime>("ApiLastUpdate")
                        .HasColumnType("datetime2")
                        .HasColumnName("api_last_update");

                    b.HasKey("Epic", "Code");

                    b.HasIndex("Code");

                    b.ToTable("epic_detail_currency");
                });

            modelBuilder.Entity("IGApi.Model.EpicDetailMarginDepositBand", b =>
                {
                    b.Property<string>("Epic")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("epic");

                    b.Property<string>("Currency")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("currency");

                    b.Property<decimal>("Min")
                        .HasPrecision(38, 19)
                        .HasColumnType("decimal(38,19)")
                        .HasColumnName("min");

                    b.Property<DateTime>("ApiLastUpdate")
                        .HasColumnType("datetime2")
                        .HasColumnName("api_last_update");

                    b.Property<decimal?>("Margin")
                        .HasPrecision(38, 19)
                        .HasColumnType("decimal(38,19)")
                        .HasColumnName("margin");

                    b.Property<decimal?>("Max")
                        .HasPrecision(38, 19)
                        .HasColumnType("decimal(38,19)")
                        .HasColumnName("max");

                    b.HasKey("Epic", "Currency", "Min");

                    b.ToTable("epic_detail_margin_deposit_band");
                });

            modelBuilder.Entity("IGApi.Model.EpicDetailOpeningHour", b =>
                {
                    b.Property<string>("Epic")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("epic");

                    b.Property<TimeSpan>("OpenTime")
                        .HasColumnType("time")
                        .HasColumnName("open_time");

                    b.Property<DateTime>("ApiLastUpdate")
                        .HasColumnType("datetime2")
                        .HasColumnName("api_last_update");

                    b.Property<TimeSpan>("CloseTime")
                        .HasColumnType("time")
                        .HasColumnName("close_time");

                    b.HasKey("Epic", "OpenTime");

                    b.ToTable("epic_detail_opening_hour");
                });

            modelBuilder.Entity("IGApi.Model.EpicDetailSpecialInfo", b =>
                {
                    b.Property<string>("Epic")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("epic");

                    b.Property<string>("SpecialInfo")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("special_info");

                    b.Property<DateTime>("ApiLastUpdate")
                        .HasColumnType("datetime2")
                        .HasColumnName("api_last_update");

                    b.HasKey("Epic", "SpecialInfo");

                    b.ToTable("epic_detail_special_info");
                });

            modelBuilder.Entity("IGApi.Model.EpicTick", b =>
                {
                    b.Property<string>("Epic")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("epic");

                    b.Property<decimal?>("Bid")
                        .HasPrecision(38, 19)
                        .HasColumnType("decimal(38,19)")
                        .HasColumnName("bid");

                    b.Property<decimal?>("Change")
                        .HasPrecision(38, 19)
                        .HasColumnType("decimal(38,19)")
                        .HasColumnName("change");

                    b.Property<decimal?>("ChangePct")
                        .HasPrecision(38, 19)
                        .HasColumnType("decimal(38,19)")
                        .HasColumnName("change_percentage");

                    b.Property<decimal?>("High")
                        .HasPrecision(38, 19)
                        .HasColumnType("decimal(38,19)")
                        .HasColumnName("high");

                    b.Property<decimal?>("Low")
                        .HasPrecision(38, 19)
                        .HasColumnType("decimal(38,19)")
                        .HasColumnName("low");

                    b.Property<int?>("MarketDelay")
                        .HasColumnType("int")
                        .HasColumnName("market_delay");

                    b.Property<string>("MarketState")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("market_state");

                    b.Property<decimal?>("MidOpen")
                        .HasPrecision(38, 19)
                        .HasColumnType("decimal(38,19)")
                        .HasColumnName("mid_open");

                    b.Property<decimal?>("Offer")
                        .HasPrecision(38, 19)
                        .HasColumnType("decimal(38,19)")
                        .HasColumnName("offer");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_time");

                    b.HasKey("Epic");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Epic"), false);

                    b.ToTable("epic_tick");

                    SqlServerEntityTypeBuilderExtensions.IsMemoryOptimized(b);
                });

            modelBuilder.Entity("IGApi.Model.OpenPosition", b =>
                {
                    b.Property<string>("AccountId")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("account_id");

                    b.Property<string>("DealId")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("deal_id");

                    b.Property<DateTime>("ApiLastUpdate")
                        .HasColumnType("datetime2")
                        .HasColumnName("api_last_update");

                    b.Property<decimal?>("ContractSize")
                        .HasPrecision(38, 19)
                        .HasColumnType("decimal(38,19)")
                        .HasColumnName("contract_size");

                    b.Property<bool>("ControlledRisk")
                        .HasColumnType("bit")
                        .HasColumnName("controlled_risk");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_date_utc");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("currency");

                    b.Property<string>("DealReference")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("deal_reference");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("direction");

                    b.Property<string>("Epic")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("epic");

                    b.Property<decimal?>("Level")
                        .HasPrecision(38, 19)
                        .HasColumnType("decimal(38,19)")
                        .HasColumnName("level");

                    b.Property<decimal?>("LimitLevel")
                        .HasPrecision(38, 19)
                        .HasColumnType("decimal(38,19)")
                        .HasColumnName("limit_level");

                    b.Property<decimal?>("Size")
                        .HasPrecision(38, 19)
                        .HasColumnType("decimal(38,19)")
                        .HasColumnName("size");

                    b.Property<decimal?>("StopLevel")
                        .HasPrecision(38, 19)
                        .HasColumnType("decimal(38,19)")
                        .HasColumnName("stop_level");

                    b.Property<decimal?>("TrailingStep")
                        .HasPrecision(38, 19)
                        .HasColumnType("decimal(38,19)")
                        .HasColumnName("trailing_step");

                    b.Property<decimal?>("TrailingStopDistance")
                        .HasPrecision(38, 19)
                        .HasColumnType("decimal(38,19)")
                        .HasColumnName("trailing_stop_distance");

                    b.HasKey("AccountId", "DealId");

                    b.ToTable("open_position");
                });

            modelBuilder.Entity("IGApi.Model.TransactionHistory", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<string>("Reference")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("reference");

                    b.Property<bool>("CashTransaction")
                        .HasColumnType("bit")
                        .HasColumnName("cash_transaction");

                    b.Property<decimal?>("CloseLevel")
                        .HasPrecision(38, 19)
                        .HasColumnType("decimal(38,19)")
                        .HasColumnName("close_level");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("currency");

                    b.Property<string>("InstrumentName")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("instrument_name");

                    b.Property<decimal?>("OpenLevel")
                        .HasPrecision(38, 19)
                        .HasColumnType("decimal(38,19)")
                        .HasColumnName("open_level");

                    b.Property<string>("Period")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("period");

                    b.Property<decimal>("ProfitAndLoss")
                        .HasPrecision(38, 19)
                        .HasColumnType("decimal(38,19)")
                        .HasColumnName("profit_and_loss");

                    b.Property<decimal?>("Size")
                        .HasPrecision(38, 19)
                        .HasColumnType("decimal(38,19)")
                        .HasColumnName("size");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("transaction_type");

                    b.HasKey("Date", "Reference");

                    b.ToTable("transaction_history");
                });

            modelBuilder.Entity("IGApi.Model.Watchlist", b =>
                {
                    b.Property<string>("AccountId")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("account_id");

                    b.Property<string>("Id")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("id");

                    b.Property<DateTime>("ApiLastUpdate")
                        .HasColumnType("datetime2")
                        .HasColumnName("api_last_update");

                    b.Property<bool>("DefaultSystemWatchlist")
                        .HasColumnType("bit")
                        .HasColumnName("default_system_watchlist");

                    b.Property<bool>("Deleteable")
                        .HasColumnType("bit")
                        .HasColumnName("deletable");

                    b.Property<bool>("Editable")
                        .HasColumnType("bit")
                        .HasColumnName("editable");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("name");

                    b.HasKey("AccountId", "Id");

                    b.ToTable("watchlist");
                });

            modelBuilder.Entity("IGApi.Model.WorkingOrder", b =>
                {
                    b.Property<string>("AccountId")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("account_id");

                    b.Property<string>("DealId")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("deal_id");

                    b.Property<DateTime>("ApiLastUpdate")
                        .HasColumnType("datetime2")
                        .HasColumnName("api_last_update");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_date");

                    b.Property<string>("CurrencyCode")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("currency_code");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("direction");

                    b.Property<bool>("Dma")
                        .HasColumnType("bit")
                        .HasColumnName("dma");

                    b.Property<string>("Epic")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("epic");

                    b.Property<DateTime?>("GoodTillDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("good_till_date");

                    b.Property<bool>("GuaranteedStop")
                        .HasColumnType("bit")
                        .HasColumnName("guaranteed_stop");

                    b.Property<decimal?>("LimitDistance")
                        .HasPrecision(38, 19)
                        .HasColumnType("decimal(38,19)")
                        .HasColumnName("limit_distance");

                    b.Property<decimal?>("OrderLevel")
                        .HasPrecision(38, 19)
                        .HasColumnType("decimal(38,19)")
                        .HasColumnName("order_level");

                    b.Property<decimal?>("OrderSize")
                        .HasPrecision(38, 19)
                        .HasColumnType("decimal(38,19)")
                        .HasColumnName("order_size");

                    b.Property<string>("OrderType")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("order_type");

                    b.Property<decimal?>("StopDistance")
                        .HasPrecision(38, 19)
                        .HasColumnType("decimal(38,19)")
                        .HasColumnName("stop_distance");

                    b.Property<string>("TimeInForce")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("time_in_force");

                    b.HasKey("AccountId", "DealId");

                    b.ToTable("working_order");
                });

            modelBuilder.Entity("IGApi.Model.EpicDetailCurrency", b =>
                {
                    b.HasOne("IGApi.Model.Currency", "Currency")
                        .WithMany("Currencies")
                        .HasForeignKey("Code")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IGApi.Model.EpicDetail", "EpicDetail")
                        .WithMany("Currencies")
                        .HasForeignKey("Epic")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("EpicDetail");
                });

            modelBuilder.Entity("IGApi.Model.EpicDetailMarginDepositBand", b =>
                {
                    b.HasOne("IGApi.Model.EpicDetail", "EpicDetail")
                        .WithMany("MarginDepositBands")
                        .HasForeignKey("Epic")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EpicDetail");
                });

            modelBuilder.Entity("IGApi.Model.EpicDetailOpeningHour", b =>
                {
                    b.HasOne("IGApi.Model.EpicDetail", "EpicDetail")
                        .WithMany("OpeningHours")
                        .HasForeignKey("Epic")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EpicDetail");
                });

            modelBuilder.Entity("IGApi.Model.EpicDetailSpecialInfo", b =>
                {
                    b.HasOne("IGApi.Model.EpicDetail", "EpicDetail")
                        .WithMany("SpecialInfo")
                        .HasForeignKey("Epic")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EpicDetail");
                });

            modelBuilder.Entity("IGApi.Model.Currency", b =>
                {
                    b.Navigation("Currencies");
                });

            modelBuilder.Entity("IGApi.Model.EpicDetail", b =>
                {
                    b.Navigation("Currencies");

                    b.Navigation("MarginDepositBands");

                    b.Navigation("OpeningHours");

                    b.Navigation("SpecialInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
